- name: mongos
  block:
    - name: docker container for mongos instance
      docker_container:
        pull: yes
        name: mongos
        image: "{{ docker_registry_host }}/bitnami/mongodb-sharded:{{ mongo_version }}"
        state: "{{ docker_container_remove | ternary('absent', docker_container_stopped | ternary('stopped', 'started'))  }}"
        recreate: "{{ docker_container_force_recreate }}"
        restart: "{{ docker_container_restart }}"
        restart_policy: "always"
        network_mode: "{{ docker_use_hosts_file | ternary('host', 'bridge') }}"
        env:
          BITNAMI_DEBUG: "{{mongo_debug | ternary('true', 'false') }}"
          MONGODB_SYSTEM_LOG_VERBOSITY: "{{ mongo_system_log_verbosity | string }}"
          MONGODB_DISABLE_SYSTEM_LOG: "{{ mongo_disable_system_log | ternary('true', 'false') }}"
          MONGODB_MAX_TIMEOUT: "{{ mongo_max_wait_timeout | string }}"
          MONGODB_ENABLE_DIRECTORY_PER_DB: "{{ mongo_directory_per_db | ternary('true', 'false') }}"
          MONGODB_ADVERTISED_HOSTNAME: "{{ inventory_hostname }}"
          MONGODB_SHARDING_MODE: mongos
          MONGODB_CFG_PRIMARY_HOST: "{{ groups['config_servers'][0] }}"
          MONGODB_CFG_REPLICA_SET_NAME: "{{ mongo_cfgsvr_replica_set_name }}"
          MONGODB_ROOT_PASSWORD: "{{ vault_mongo_root_password }}"
          MONGODB_REPLICA_SET_KEY: "{{ vault_mongo_auth_scram_key }}"
          MONGODB_EXTRA_FLAGS: "{{ mongo_extra_args }}"
        ports:
          - 27017:27017
        healthcheck:
          # Check if mongo instance is healthy by greping for mongod.
          # If this fails or timeouts, the healthcheck fails.
          test:
            - "{{ mongo_healthcheck.liveness_probe.enabled | ternary('CMD', 'NONE') }}"
            - mongo
            - --eval
            - "db.adminCommand('ping')"
          start_period: "{{ mongo_healthcheck.liveness_probe.initial_delay_seconds }}"
          interval: "{{ mongo_healthcheck.liveness_probe.period_seconds }}"
          timeout: "{{ mongo_healthcheck.liveness_probe.timeout_seconds }}"
          retries: "{{ mongo_healthcheck.liveness_probe.failure_threshold }}"
        ulimits:
          - "nofile:64000:64000"
          - "nproc:64000:64000"
    - name: docker container for pmm-client (monitoring)
      docker_container:
        pull: yes
        name: pmm-client-mongos
        image: "{{ docker_registry_host }}/{{ pmm_client_image }}:{{ pmm_client_version }}"
        state: "{{ docker_container_remove | ternary('absent', docker_container_stopped | ternary('stopped', 'started'))  }}"
        recreate: "{{ docker_container_force_recreate }}"
        restart: "{{ docker_container_restart }}"
        restart_policy: "always"
        network_mode: "{{ docker_use_hosts_file | ternary('host', 'bridge') }}"
        env:
          PMM_AGENT_CONFIG_FILE: "/usr/local/percona/pmm2/config/pmm-agent.yaml"
          PMM_AGENT_SETUP: "1"
          PMM_AGENT_SETUP_NODE_TYPE: "container"
          PMM_AGENT_SETUP_NODE_NAME: "{{ inventory_hostname }}"
          PMM_AGENT_SETUP_CONTAINER_NAME: "mongos-{{ inventory_hostname }}"
          PMM_AGENT_SETUP_FORCE: "1"
          PMM_AGENT_SERVER_ADDRESS: "{{ groups['pmm_server'][0] }}:443"
          PMM_AGENT_SERVER_USERNAME: "{{ vault_pmm_server_user }}"
          PMM_AGENT_SERVER_PASSWORD: "{{ vault_pmm_server_password }}"
          PMM_AGENT_SERVER_INSECURE_TLS: "1"
          # custom variable for setup (extended for automatically run post setup action to add service)
          DB_TYPE: mongodb
          DB_USER: "{{ vault_mongo_monit_user }}"
          DB_PASSWORD: "{{ vault_mongo_monit_password }}"
          DB_ADDRESS: "{{ inventory_hostname }}:27017"
          SERVICE_NAME: "{{ inventory_hostname }}-mongos"
          DB_CLUSTER_NAME: "{{ mongo_cluster_name }}"
        ports:
          - 42000:42000 # node exporter
          - 42001:42001 # mongodb exporter
      register: docker_pmmclient
