---
- name: "local file mount for {{ mongo_data.local_file_mount_volume_path }}"
  block:
    - name: create data directory
      file:
        path: "{{ mongo_data.local_file_mount_volume_path }}"
        state: directory
        owner: "1001"
        group: "{{ ansible_user_id }}"
        mode: "0755"
      become: yes
    - name: "create lvm volume group for {{ mongo_data.local_file_mount_volume_path }}"
      lvg:
        vg: "{{ mongo_data.local_file_mount_lvm.vg_name }}"
        pvs: ["{{ mongo_data_local_file_mount_lvm_pvs }}"]
      become: yes
      when: mongo_data.local_file_mount_lvm.enabled
    - name: "create lvm locical volume for {{ mongo_data.local_file_mount_volume_path }}"
      lvol:
        vg: "{{ mongo_data.local_file_mount_lvm.vg_name }}"
        lv: "{{ mongo_data.local_file_mount_lvm.lv_name }}"
        size: "{{ mongo_data.local_file_mount_lvm.size }}"
      become: yes
      when: mongo_data.local_file_mount_lvm.enabled
    - name: "create a xfs filesystem on lvm for {{ mongo_data.local_file_mount_volume_path }}"
      filesystem:
        fstype: "xfs"
        dev: "/dev/mapper/{{ mongo_data.local_file_mount_lvm.vg_name }}-{{ mongo_data.local_file_mount_lvm.lv_name }}"
        force: no
      become: yes
      when: mongo_data.local_file_mount_lvm.enabled
    - name: mount lvm locial volume
      mount:
        path: "{{ mongo_data.local_file_mount_volume_path }}"
        src: "/dev/mapper/{{ mongo_data.local_file_mount_lvm.vg_name }}-{{ mongo_data.local_file_mount_lvm.lv_name }}"
        fstype: "xfs"
        opts: defaults,noatime,nodiratime
        state: mounted
      become: yes
      when: mongo_data.local_file_mount_lvm.enabled
    - name: ensure data directory ownership is correct
      file:
        path: "{{ mongo_data.local_file_mount_volume_path }}"
        state: directory
        owner: "1001"
        group: "{{ ansible_user_id }}"
        mode: "0755"
      become: yes
      when: mongo_data.local_file_mount_lvm.enabled
  when: not mongo_data.use_docker_volume

- name: "(primary) mongo shard - {{ replica_set_name }}"
  block:
    - name: "create a docker volume for (primary) shard {{ replica_set_name }}"
      docker_volume:
        name: "{{ mongo_data.docker_volume_name }}"
      when: mongo_data.use_docker_volume
    - name: docker container for (primary) shard {{ replica_set_name }}
      docker_container:
        pull: yes
        name: "mongodb-shard-{{ replica_set_name }}"
        image: "{{ docker_registry_host }}/bitnami/mongodb-sharded:{{ mongo_version }}"
        state: "{{ docker_container_remove | ternary('absent', docker_container_stopped | ternary('stopped', 'started'))  }}"
        recreate: "{{ docker_container_force_recreate }}"
        restart: "{{ docker_container_restart }}"
        restart_policy: "always"
        network_mode: "{{ docker_use_hosts_file | ternary('host', 'bridge') }}"
        env:
          BITNAMI_DEBUG: "{{mongo_debug | ternary('true', 'false') }}"
          MONGODB_SYSTEM_LOG_VERBOSITY: "{{ mongo_system_log_verbosity | string }}"
          MONGODB_DISABLE_SYSTEM_LOG: "{{ mongo_disable_system_log | ternary('true', 'false') }}"
          MONGODB_MAX_TIMEOUT: "{{ mongo_max_wait_timeout | string }}"
          MONGODB_ENABLE_DIRECTORY_PER_DB: "{{ mongo_directory_per_db | ternary('true', 'false') }}"
          MONGODB_ADVERTISED_HOSTNAME: "{{ inventory_hostname }}"
          MONGODB_SHARDING_MODE: shardsvr
          MONGODB_MONGOS_HOST: "{{ groups['mongos'][0] }}"
          MONGODB_ROOT_PASSWORD: "{{ vault_mongo_root_password }}"
          MONGODB_REPLICA_SET_MODE: primary
          MONGODB_REPLICA_SET_KEY: "{{ vault_mongo_auth_scram_key }}"
          MONGODB_REPLICA_SET_NAME: "{{ replica_set_name }}"
          MONGODB_EXTRA_FLAGS: "{{ mongod_extra_args }}"
        volumes:
          - "{{ mongo_data.use_docker_volume | ternary(mongo_data.docker_volume_name, mongo_data.local_file_mount_volume_path) }}:/bitnami/mongodb/data"
        ports:
          - 27017:27017
        healthcheck:
          # Check if mongo instance is healthy by greping for mongod.
          # If this fails or timeouts, the healthcheck fails.
          test:
            - "{{ mongo_healthcheck.liveness_probe.enabled | ternary('CMD', 'NONE') }}"
            - "pgrep"
            - "mongod"
          start_period: "{{ mongo_healthcheck.liveness_probe.initial_delay_seconds }}"
          interval: "{{ mongo_healthcheck.liveness_probe.period_seconds }}"
          timeout: "{{ mongo_healthcheck.liveness_probe.timeout_seconds }}"
          retries: "{{ mongo_healthcheck.liveness_probe.failure_threshold }}"
        ulimits:
          - "nofile:64000:64000"
          - "nproc:64000:64000"
      register: docker_shard_pri_output
    - name: docker container for pmm-client (monitoring)
      docker_container:
        pull: yes
        name: pmm-client-shard
        image: "{{ docker_registry_host }}/{{ pmm_client_image }}:{{ pmm_client_version }}"
        state: "{{ docker_container_remove | ternary('absent', docker_container_stopped | ternary('stopped', 'started'))  }}"
        recreate: "{{ docker_container_force_recreate or pmm_agent_recreate }}"
        restart: "{{ docker_container_restart }}"
        restart_policy: "always"
        network_mode: "{{ docker_use_hosts_file | ternary('host', 'bridge') }}"
        env:
          PMM_AGENT_CONFIG_FILE: "/usr/local/percona/pmm2/config/pmm-agent.yaml"
          PMM_AGENT_SETUP: "1"
          PMM_AGENT_SETUP_NODE_TYPE: "container"
          PMM_AGENT_SETUP_NODE_NAME: "{{ inventory_hostname }}"
          PMM_AGENT_SETUP_CONTAINER_NAME: "{{ inventory_hostname }}-shard"
          PMM_AGENT_SETUP_FORCE: "1"
          PMM_AGENT_SERVER_ADDRESS: "{{ groups['pmm_server'][0] }}:443"
          PMM_AGENT_SERVER_USERNAME: "{{ vault_pmm_server_user }}"
          PMM_AGENT_SERVER_PASSWORD: "{{ vault_pmm_server_password }}"
          PMM_AGENT_SERVER_INSECURE_TLS: "1"
          # custom variable for setup (extended for automatically run post setup action to add service)
          DB_TYPE: mongodb
          DB_USER: "{{ vault_mongo_monit_user }}"
          DB_PASSWORD: "{{ vault_mongo_monit_password }}"
          DB_ADDRESS: "{{ inventory_hostname }}:27017"
          SERVICE_NAME: "{{ inventory_hostname }}:27017"
          DB_CLUSTER_NAME: "{{ mongo_cluster_name }}"
        ports:
          - 42000:42000 # node exporter
          - 42001:42001 # mongodb exporter
      register: docker_pmmclient
      when: pmm_agent_setup
  when: inventory_hostname == groups[group_names|select('search','mongo_shard_')|list|first][0]

- name: "(secondary) mongo shard - {{ replica_set_name }}"
  block:
    - name: "create a docker volume for (secondary) shard {{ replica_set_name }}"
      docker_volume:
        name: "{{ mongo_data.docker_volume_name }}"
      when: mongo_data.use_docker_volume
    - name: docker container for (secondary) shard {{ replica_set_name }}
      docker_container:
        pull: yes
        name: "mongodb-shard-{{ replica_set_name }}"
        image: "{{ docker_registry_host }}/bitnami/mongodb-sharded:{{ mongo_version }}"
        state: "{{ docker_container_remove | ternary('absent', docker_container_stopped | ternary('stopped', 'started')) }}"
        recreate: "{{ docker_container_force_recreate }}"
        restart: "{{ docker_container_restart }}"
        restart_policy: "always"
        network_mode: "{{ docker_use_hosts_file | ternary('host', 'bridge') }}"
        env:
          BITNAMI_DEBUG: "{{mongo_debug | ternary('true', 'false') }}"
          MONGODB_SYSTEM_LOG_VERBOSITY: "{{ mongo_system_log_verbosity | string }}"
          MONGODB_DISABLE_SYSTEM_LOG: "{{ mongo_disable_system_log | ternary('true', 'false') }}"
          MONGODB_MAX_TIMEOUT: "{{ mongo_max_wait_timeout | string }}"
          MONGODB_ENABLE_DIRECTORY_PER_DB: "{{ mongo_directory_per_db | ternary('true', 'false') }}"
          MONGODB_ADVERTISED_HOSTNAME: "{{ inventory_hostname }}"
          MONGODB_SHARDING_MODE: shardsvr
          MONGODB_PRIMARY_HOST: "{{ groups[group_names|select('search','mongo_shard_')|list|first][0] }}"
          MONGODB_PRIMARY_ROOT_PASSWORD: "{{ vault_mongo_root_password }}"
          MONGODB_REPLICA_SET_MODE: secondary
          MONGODB_REPLICA_SET_KEY: "{{ vault_mongo_auth_scram_key }}"
          MONGODB_REPLICA_SET_NAME: "{{ replica_set_name }}"
          MONGODB_EXTRA_FLAGS: "{{ mongod_extra_args }}"
        volumes:
          - "{{ mongo_data.use_docker_volume | ternary(mongo_data.docker_volume_name, mongo_data.local_file_mount_volume_path) }}:/bitnami/mongodb/data"
        ports:
          - 27017:27017
        healthcheck:
          # Check if mongo instance is healthy by greping for mongod.
          # If this fails or timeouts, the healthcheck fails.
          test:
            - "{{ mongo_healthcheck.liveness_probe.enabled | ternary('CMD', 'NONE') }}"
            - "pgrep"
            - "mongod"
          start_period: "{{ mongo_healthcheck.liveness_probe.initial_delay_seconds }}"
          interval: "{{ mongo_healthcheck.liveness_probe.period_seconds }}"
          timeout: "{{ mongo_healthcheck.liveness_probe.timeout_seconds }}"
          retries: "{{ mongo_healthcheck.liveness_probe.failure_threshold }}"
        ulimits:
          - "nofile:64000:64000"
          - "nproc:64000:64000"
      register: docker_shard_sec_output
    - name: docker container for pmm-client (monitoring)
      docker_container:
        pull: yes
        name: pmm-client-shard
        image: "{{ docker_registry_host }}/{{ pmm_client_image }}:{{ pmm_client_version }}"
        state: "{{ docker_container_remove | ternary('absent', docker_container_stopped | ternary('stopped', 'started'))  }}"
        recreate: "{{ docker_container_force_recreate or pmm_agent_recreate }}"
        restart: "{{ docker_container_restart }}"
        restart_policy: "always"
        network_mode: "{{ docker_use_hosts_file | ternary('host', 'bridge') }}"
        env:
          PMM_AGENT_CONFIG_FILE: "/usr/local/percona/pmm2/config/pmm-agent.yaml"
          PMM_AGENT_SETUP: "1"
          PMM_AGENT_SETUP_NODE_TYPE: "container"
          PMM_AGENT_SETUP_NODE_NAME: "{{ inventory_hostname }}"
          PMM_AGENT_SETUP_CONTAINER_NAME: "{{ inventory_hostname }}-shard"
          PMM_AGENT_SETUP_FORCE: "1"
          PMM_AGENT_SERVER_ADDRESS: "{{ groups['pmm_server'][0] }}:443"
          PMM_AGENT_SERVER_USERNAME: "{{ vault_pmm_server_user }}"
          PMM_AGENT_SERVER_PASSWORD: "{{ vault_pmm_server_password }}"
          PMM_AGENT_SERVER_INSECURE_TLS: "1"
          # custom variable for setup (extended for automatically run post setup action to add service)
          DB_TYPE: mongodb
          DB_USER: "{{ vault_mongo_monit_user }}"
          DB_PASSWORD: "{{ vault_mongo_monit_password }}"
          DB_ADDRESS: "{{ inventory_hostname }}:27017"
          SERVICE_NAME: "{{ inventory_hostname }}:27017"
          DB_CLUSTER_NAME: "{{ mongo_cluster_name }}"
        ports:
          - 42000:42000 # node exporter
          - 42001:42001 # mongodb exporter
      register: docker_pmmclient
      when: pmm_agent_setup
  when: inventory_hostname != groups[group_names|select('search','mongo_shard_')|list|first][0]

- name: "(arbiter) mongo shard - {{ replica_set_name }}"
  block:
    - name: docker container for (arbiter) shard {{ replica_set_name }}
      docker_container:
        pull: yes
        name: "mongodb-shard-{{ hostvars[groups[arbiter_for_replica_set][0]].replica_set_name }}-arb"
        image: "{{ docker_registry_host }}/bitnami/mongodb-sharded:{{ mongo_version }}"
        state: "{{ docker_container_remove | ternary('absent', docker_container_stopped | ternary('stopped', 'started')) }}"
        recreate: "{{ docker_container_force_recreate }}"
        restart: "{{ docker_container_restart }}"
        restart_policy: "always"
        network_mode: "{{ docker_use_hosts_file | ternary('host', 'bridge') }}"
        env:
          BITNAMI_DEBUG: "{{mongo_debug | ternary('true', 'false') }}"
          MONGODB_SYSTEM_LOG_VERBOSITY: "{{ mongo_system_log_verbosity | string }}"
          MONGODB_DISABLE_SYSTEM_LOG: "{{ mongo_disable_system_log | ternary('true', 'false') }}"
          MONGODB_MAX_TIMEOUT: "{{ mongo_max_wait_timeout | string }}"
          MONGODB_ENABLE_DIRECTORY_PER_DB: "{{ mongo_directory_per_db | ternary('true', 'false') }}"
          MONGODB_ADVERTISED_HOSTNAME: "{{ inventory_hostname }}"
          MONGODB_SHARDING_MODE: shardsvr
          MONGODB_PRIMARY_HOST: "{{ groups[arbiter_for_replica_set][0] }}"
          MONGODB_PRIMARY_ROOT_PASSWORD: "{{ vault_mongo_root_password }}"
          MONGODB_REPLICA_SET_MODE: arbiter
          MONGODB_REPLICA_SET_KEY: "{{ vault_mongo_auth_scram_key }}"
          MONGODB_REPLICA_SET_NAME: "{{ hostvars[groups[arbiter_for_replica_set][0]].replica_set_name }}"
          MONGODB_EXTRA_FLAGS: "{{ mongod_extra_args }}"
          MONGODB_PORT_NUMBER: "27018"
        ports:
          - 27018:27018
        healthcheck:
          # Check if mongo instance is healthy by greping for mongod.
          # If this fails or timeouts, the healthcheck fails.
          test:
            - "{{ mongo_healthcheck.liveness_probe.enabled | ternary('CMD', 'NONE') }}"
            - "pgrep"
            - "mongod"
          start_period: "{{ mongo_healthcheck.liveness_probe.initial_delay_seconds }}"
          interval: "{{ mongo_healthcheck.liveness_probe.period_seconds }}"
          timeout: "{{ mongo_healthcheck.liveness_probe.timeout_seconds }}"
          retries: "{{ mongo_healthcheck.liveness_probe.failure_threshold }}"
        ulimits:
          - "nofile:64000:64000"
          - "nproc:64000:64000"
      register: docker_shard_arb_output
    # - name: docker container for pmm-client (monitoring)
    #   docker_container:
    #     pull: yes
    #     name: pmm-client-shard-arb
    #     image: "{{ docker_registry_host }}/{{ pmm_client_image }}:{{ pmm_client_version }}"
    #     state: "{{ docker_container_remove | ternary('absent', docker_container_stopped | ternary('stopped', 'started'))  }}"
    #     recreate: "{{ docker_container_force_recreate or pmm_agent_recreate }}"
    #     restart: "{{ docker_container_restart }}"
    #     restart_policy: "always"
    #     network_mode: "{{ docker_use_hosts_file | ternary('host', 'bridge') }}"
    #     env:
    #       PMM_AGENT_CONFIG_FILE: "/usr/local/percona/pmm2/config/pmm-agent.yaml"
    #       PMM_AGENT_SETUP: "1"
    #       PMM_AGENT_SETUP_NODE_TYPE: "container"
    #       PMM_AGENT_SETUP_NODE_NAME: "{{ inventory_hostname }}"
    #       PMM_AGENT_SETUP_CONTAINER_NAME: "{{ inventory_hostname }}-shard-arb"
    #       PMM_AGENT_SETUP_FORCE: "1"
    #       PMM_AGENT_SERVER_ADDRESS: "{{ groups['pmm_server'][0] }}:443"
    #       PMM_AGENT_SERVER_USERNAME: "{{ vault_pmm_server_user }}"
    #       PMM_AGENT_SERVER_PASSWORD: "{{ vault_pmm_server_password }}"
    #       PMM_AGENT_SERVER_INSECURE_TLS: "1"
    #       # custom variable for setup (extended for automatically run post setup action to add service)
    #       DB_TYPE: mongodb
    #       DB_USER: "{{ vault_mongo_monit_user }}"
    #       DB_PASSWORD: "{{ vault_mongo_monit_password }}"
    #       DB_ADDRESS: "{{ inventory_hostname }}:27018"
    #       SERVICE_NAME: "{{ inventory_hostname }}:27018"
    #       DB_CLUSTER_NAME: "{{ mongo_cluster_name }}"
    #     ports:
    #       - 42002:42001 # mongodb exporter
    #   register: docker_pmmclient
    #   when: pmm_agent_setup
  when: arbiter_for_replica_set is defined

- name: prune unused data volume
  docker_prune:
    volumes: yes
  tags:
    - never
    - wipe_data

- name: perform delete on data directory
  shell: |
    mount -a
    rm -rf "{{ mongo_data.local_file_mount_volume_path }}/*"
  become: yes
  changed_when: no
  when: not mongo_data.use_docker_volume
  tags:
    - never
    - wipe_data
